# -*- coding: utf-8 -*-
"""CS109 Final Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TQav13b-uMFXKxkeCehpDqFlKCIr5d67
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# World football player data 2021-2022 season (most updated comprehensive data set)
file_path = '2021-2022 Football Player Stats.csv'
df = pd.read_csv(file_path, encoding='ISO-8859-1', delimiter=';')

# Drop rows with missing values
df = df.dropna()

# Keep a copy of relevant columns before creating dummy variables
df_display = df[['Player', 'Pos']]

# Select Key Player Statistics
features = ['Goals', 'Assists', 'PasTotCmp', 'PasTotAtt', 'Tkl', 'Recov']

# Create the 'Performance' column based on criteria
df['Performance'] = np.where(df['Goals'] > df['Goals'].mean(), 1, 0)

# Convert categorical variables to numerical (if any)
df = pd.get_dummies(df, columns=['Pos', 'Squad', 'Nation'], drop_first=True)

# Split the data into training and testing sets
X = df[features]
y = df['Performance']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Check if we have at least two classes
if len(np.unique(y_train)) > 1:
    # Train the logistic regression model
    log_reg = LogisticRegression(max_iter=1000)
    log_reg.fit(X_train, y_train)

    # Predict the outcomes on the test set
    y_pred = log_reg.predict(X_test)

    # Evaluate the model
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # Confusion Matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title('Confusion Matrix')
    plt.show()

# Predict the probability of being a top performer for all players
df['Predicted_Performance'] = log_reg.predict_proba(df[features])[:, 1]

# Add the predicted performance to the display DataFrame
df_display['Predicted_Performance'] = df['Predicted_Performance']

# Sort players by their predicted performance probability in descending order
df_sorted = df_display.sort_values(by='Predicted_Performance', ascending=False)

# Select the top 50 players
top_50 = df_sorted.head(50)

# Show selected players
top_50[['Player', 'Pos', 'Predicted_Performance']]